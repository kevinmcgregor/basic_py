var_tables(mean(obs.n.top), conc, dsct, "exact")
# Variance of species numbers at top level calculated within quintiles
aggregate(obs.n.sp, by=list(obs.n.top.q), var)
# Identifying quintiles of number of samples at top level
obs.n.top.q <- cut(obs.n.top, 5)
# Variance of species numbers at top level calculated within quintiles
aggregate(obs.n.sp, by=list(obs.n.top.q), var)
var_tables(700, conc, dsct, "exact")
var_tables(720, conc, dsct, "exact")
var_tables(740, conc, dsct, "exact")
var_tables(750, conc, dsct, "exact")
var_tables(770, conc, dsct, "exact")
var_tables(770, conc, dsct, "approximate")
conc
dsct
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/R/hpy_functions.R', echo=TRUE)
var_tables(770, conc, dsct, "approximate")
vals
vals <- 1:100
var_tables(700, conc, dsct, "approximate")
var_tables(700, conc, dsct)
var_tables(700, conc, dsct, "exact")
var_tables(740, conc, dsct, "exact")
var_tables(740, conc, dsct)
gc()
library(parallel)
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
n.sim <- 100
m <- 10
n <- 1000
conc <- 0.5
dsct <- 0.5
# Comparing approximate vs. exact theoretical expected values for fixed N
# Also doing the same for variance
n.fix <- 1000
dsct.fix <- 0.5
conc.vals <- seq(30, 200, by=1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
conc.vals <- seq(1, 100, by=1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
# Comparing approximate vs. exact theoretical expected values for fixed N
# Also doing the same for variance
n.fix <- 1000
dsct.fix <- 0.5
conc.vals <- seq(1, 20, by=0.5)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
conc.vals <- seq(1, 5, by=0.1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
conc.vals <- seq(0.1, 5, by=0.1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
conc.vals <- seq(0.1, 10, by=0.1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
rge.x <- range(exact.var)
plot(exact.var, approx.var, type="l", lwd=3)
approx.var
plot(approx.var)
plot(exact.var)
#'
#' @param n Positive integer specifying the sample size
#' @param conc Concentration parameter.  Must be greater than -dsct
#' @param dsct Discount parameter.  Must be between 0 and 1
#' @param method Should the variance be calculated using the approximate formula, or the (inefficient) exact formula?
#'
#' @return
#' @export
#'
#' @examples
var_tables <- function(n, conc, dsct, method=c("approximate", "exact")) {
method <- match.arg(method)
if (method=="approximate") {
#r <- conc/dsct*(1+n/conc)^(2*dsct)*exp(dsct*n/(conc*(conc+n)))
r <- conc/dsct*(1+n/conc)^(dsct)*exp(dsct*n/(conc*(conc+n)))
} else {
poch1 <- poch_ratio(n, conc+dsct, conc)
cd <- conc/dsct
r <- cd*((conc+dsct)/dsct*poch_ratio(n, conc+2*dsct, conc) - poch1 - cd*poch1^2)
}
return(r)
}
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
rge.x <- range(exact.var)
plot(exact.var, approx.var, type="l", lwd=3)
#'
#' @param n Positive integer specifying the sample size
#' @param conc Concentration parameter.  Must be greater than -dsct
#' @param dsct Discount parameter.  Must be between 0 and 1
#' @param method Should the variance be calculated using the approximate formula, or the (inefficient) exact formula?
#'
#' @return
#' @export
#'
#' @examples
var_tables <- function(n, conc, dsct, method=c("approximate", "exact")) {
method <- match.arg(method)
if (method=="approximate") {
#r <- conc/dsct*(1+n/conc)^(2*dsct)*exp(dsct*n/(conc*(conc+n)))
r <- conc/dsct*(1+n/conc)^(dsct)*exp(dsct*n/(2*conc*(conc+n)))
} else {
poch1 <- poch_ratio(n, conc+dsct, conc)
cd <- conc/dsct
r <- cd*((conc+dsct)/dsct*poch_ratio(n, conc+2*dsct, conc) - poch1 - cd*poch1^2)
}
return(r)
}
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
rge.x <- range(exact.var)
plot(exact.var, approx.var, type="l", lwd=3)
plot(exact.var)
conc.vals <- seq(10, 100, by=1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
plot(exact.var)
conc.vals <- seq(100, 1000, by=1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
plot(exact.var)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/R/hpy_functions.R', echo=TRUE)
conc.vals <- seq(100, 1000, by=1)
approx.ev <- approx.var <- rep(0, length(conc.vals))
exact.ev <- exact.var <- rep(0, length(conc.vals))
for (v in 1:length(conc.vals)) {
approx.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix)
exact.ev[v] <- expected_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
approx.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix)
exact.var[v] <- var_tables(n.fix, conc.vals[v], dsct.fix, method="exact")
}
rge.x <- range(exact.ev)
plot(exact.ev, approx.ev, ylim=rge.x, type="l", lwd=3)
abline(0, 1, lty=2, col="red", lwd=2)
rge.x <- range(exact.var)
plot(exact.var, approx.var, type="l", lwd=3)
sqrt(3500)
gc()
library(parallel)
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
cmd.line <- TRUE
n.cores <- 10
arg.file <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/sim/arg_files/af8.txt"
args <- read.table(arg.file, header = FALSE, stringsAsFactors = FALSE)$V1
n.sim <- as.numeric(args[1])
m <- as.numeric(args[2])
n <- as.numeric(args[3])
conc <- as.numeric(args[4])
dsct <- as.numeric(args[5])
out.dir <- args[6]
# Run HPY simulations in parallel
sim.results <- mclapply(1:n.sim, sample_hpy, m=m, n=rep(n, m),
conc.top=conc, dsct.top=dsct,
conc=rep(conc,m), dsct=rep(dsct,m),
mc.cores = n.cores)
obs.n.top <- unlist(lapply(sim.results, function(x){x$n.samp}))
# Observed numbers of species at top level
obs.n.sp <- unlist(lapply(sim.results, function(x){x$n.sp}))
# Observed variance of species numbers at top level (ignoring differences in number of samples)
var.n.top <- var(obs.n.sp)
obs.n.sp
var.n.top
mean(obs.n.sp)
rm(var.n.top)
# Observed variance of species numbers at top level (ignoring differences in number of samples)
obs.var.n.sp <- var(obs.n.sp)
obs.var.n.sp
sqrt(450)
# Theoretical means for number of tables at top level (using approximate formula)
expect.n.sp <- unlist(lapply(sim.results, function(x) {expected_tables(x$n.samp, conc, dsct)}))
# Theoretical means for number of tables at top level (using exact formula)
expect.n.sp.exact <- unlist(lapply(sim.results, function(x) {
expected_tables(x$n.samp, conc, dsct, method="exact")
}))
# Theoretical variance for number of tables at top level (using approx formula)
var.n.sp <- unlist(lapply(sim.results, function(x) {var_tables(x$n.samp, conc, dsct)}))
# Theoretical variance for number of tables at top level (using exact formula)
var.n.sp.exact <- unlist(lapply(sim.results, function(x) {var_tables(x$n.samp, conc, dsct, "exact")}))
var.n.sp
var.n.sp.exact
# Same thing for local level
obs.n.sp.lower <- unlist(lapply(sim.results, function(x){mean(x$t.tab)}))
expect.n.sp.lower <- expected_tables(n, conc, dsct)
expect.n.sp.lower.exact <- expected_tables(n, conc, dsct, method="exact")
var.n.sp.lower <- var_tables(n, conc, dsct)
var.n.sp.lower.exact <- var_tables(n, conc, dsct, "exact")
# Same thing for local level
obs.n.sp.lower <- unlist(lapply(sim.results, function(x){mean(x$t.tab)}))
obs.var.n.sp.lower <- var(obs.n.sp.lower)
obs.var.n.sp.lower
obs.n.sp.lower
expect.n.sp.lower <- expected_tables(n, conc, dsct)
expect.n.sp.lower.exact <- expected_tables(n, conc, dsct, method="exact")
var.n.sp.lower <- var_tables(n, conc, dsct)
var.n.sp.lower.exact <- var_tables(n, conc, dsct, "exact")
var.n.sp.lower
var.n.sp.lower.exact
n
obs.n.sp.lower
expect.n.sp.lower
expect.n.sp.lower.exact
obs.n.sp.lower
obs.n.sp.lower.all <- lapply(sim.results, function(x){x$t.tab})
obs.n.sp.lower.all
obs.n.sp.lower.all <- unlist(lapply(sim.results, function(x){x$t.tab}))
obs.n.sp.lower.all
obs.var.n.sp.lower <- var(obs.n.sp.lower.all)
obs.var.n.sp.lower
var.n.sp.lower.exact
var.n.sp.lower
conc/dsct
gc()
library(parallel)
source("~/research/pitman_yor/basic_py/R/hpy_functions.R")
cmd.line <- TRUE
n.cores <- 10
arg.file <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/sim/arg_files/af8.txt"
args <- read.table(arg.file, header = FALSE, stringsAsFactors = FALSE)$V1
n.sim <- as.numeric(args[1])
m <- as.numeric(args[2])
n <- as.numeric(args[3])
conc <- as.numeric(args[4])
dsct <- as.numeric(args[5])
out.dir <- args[6]
# Run HPY simulations in parallel
sim.results <- mclapply(1:n.sim, sample_hpy, m=m, n=rep(n, m),
conc.top=conc, dsct.top=dsct,
conc=rep(conc,m), dsct=rep(dsct,m),
mc.cores = n.cores)
obs.n.top <- unlist(lapply(sim.results, function(x){x$n.samp}))
# Observed numbers of species at top level
obs.n.sp <- unlist(lapply(sim.results, function(x){x$n.sp}))
# Observed variance of species numbers at top level (ignoring differences in number of samples)
obs.var.n.sp <- var(obs.n.sp)
# Theoretical means for number of tables at top level (using approximate formula)
expect.n.sp <- unlist(lapply(sim.results, function(x) {expected_tables(x$n.samp, conc, dsct)}))
# Theoretical means for number of tables at top level (using exact formula)
expect.n.sp.exact <- unlist(lapply(sim.results, function(x) {
expected_tables(x$n.samp, conc, dsct, method="exact")
}))
# Theoretical variance for number of tables at top level (using approx formula)
var.n.sp <- unlist(lapply(sim.results, function(x) {var_tables(x$n.samp, conc, dsct)}))
# Theoretical variance for number of tables at top level (using exact formula)
var.n.sp.exact <- unlist(lapply(sim.results, function(x) {var_tables(x$n.samp, conc, dsct, "exact")}))
# Same thing for local level
obs.n.sp.lower <- unlist(lapply(sim.results, function(x){mean(x$t.tab)}))
obs.n.sp.lower.all <- unlist(lapply(sim.results, function(x){x$t.tab}))
obs.var.n.sp.lower <- var(obs.n.sp.lower.all)
expect.n.sp.lower <- expected_tables(n, conc, dsct)
expect.n.sp.lower.exact <- expected_tables(n, conc, dsct, method="exact")
var.n.sp.lower <- var_tables(n, conc, dsct)
var.n.sp.lower.exact <- var_tables(n, conc, dsct, "exact")
obs.var.n.sp
var.n.sp
var.n.sp.exact
obs.n.sp.lower <- unlist(lapply(sim.results, function(x){mean(x$t.tab)}))
obs.n.sp.lower.all <- unlist(lapply(sim.results, function(x){x$t.tab}))
obs.var.n.sp.lower <- var(obs.n.sp.lower.all)
expect.n.sp.lower <- expected_tables(n, conc, dsct)
expect.n.sp.lower.exact <- expected_tables(n, conc, dsct, method="exact")
var.n.sp.lower <- var_tables(n, conc, dsct)
var.n.sp.lower.exact <- var_tables(n, conc, dsct, "exact")
var.n.sp.lower
var.n.sp.lower.exact
obs.var.n.sp.lower
save(m, n, conc, dsct, obs.n.top, obs.n.sp, obs.n.sp.lower, expect.n.sp, expect.n.sp.exact,
expect.n.sp.lower, expect.n.sp.lower.exact, obobs.n.sp, obs.var.n.sp.lower, var.n.sp, var.n.sp.exact,
var.n.sp.lower, var.n.sp.lower.exact,
file=paste0(out.dir, "/", "bias_n", n, "_conc", conc, "_dsct", dsct, ".RData"))
save(m, n, conc, dsct, obs.n.top, obs.n.sp, obs.n.sp.lower, expect.n.sp, expect.n.sp.exact,
expect.n.sp.lower, expect.n.sp.lower.exact, obs.n.sp, obs.var.n.sp.lower, var.n.sp, var.n.sp.exact,
var.n.sp.lower, var.n.sp.lower.exact,
file=paste0(out.dir, "/", "bias_n", n, "_conc", conc, "_dsct", dsct, ".RData"))
gc()
library(ggplot2)
in.dir <- "/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/pitman_yor/basic_py/sim"
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/sim/plots"
# Values of n and concentration parameter to loop over
# (input filenames are based on these)
n.vals <- c(10, 100, 1000)
conc.vals <- c(0.1, 1, 10, 50)
dsct.vals <- 0.5
n.rep <- 500 # Number of replications of each sim
n.n <- length(n.vals)
n.c <- length(conc.vals)
# Containers
bias.top <- bias.local <- matrix(0, n.rep, n.n*n.c)
bias.top.exact <- bias.local.exact <- matrix(0, n.rep, n.n*n.c)
bias.local.exact[,ind] <- (obs.n.sp.lower - expect.n.sp.lower.exact)/expect.n.sp.lower.exact
library(ggplot2)
in.dir <- "/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/pitman_yor/basic_py/sim"
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/sim/plots"
# Values of n and concentration parameter to loop over
# (input filenames are based on these)
n.vals <- c(10, 100, 1000)
conc.vals <- c(0.1, 1, 10, 50)
dsct.vals <- 0.5
n.rep <- 500 # Number of replications of each sim
n.n <- length(n.vals)
n.c <- length(conc.vals)
# Containers
bias.top <- bias.local <- bias.var <- bias.var.local <- matrix(0, n.rep, n.n*n.c)
bias.top.exact <- bias.local.exact <- bias.var.exact <-
bias.var.local.exact <- matrix(0, n.rep, n.n*n.c)
nn=1
cc=1
cat("n =", n.vals[nn], "\n")
cat("conc =", conc.vals[cc], "\n")
fname <- paste0(in.dir, "/", "bias_n", n.vals[nn], "_conc", conc.vals[cc], "_dsct",
dsct.vals, ".RData")
load(fname)
# Calculating bias
ind <- (nn-1)*n.c+cc
bias.top[,ind] <- (obs.n.sp - expect.n.sp)/expect.n.sp
bias.local[,ind] <- (obs.n.sp.lower - expect.n.sp.lower)/expect.n.sp.lower
bias.top.exact[,ind] <- (obs.n.sp - expect.n.sp.exact)/expect.n.sp.exact
bias.local.exact[,ind] <- (obs.n.sp.lower - expect.n.sp.lower.exact)/expect.n.sp.lower.exact
gc()
library(ggplot2)
in.dir <- "/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/pitman_yor/basic_py/sim"
plot.dir <- "/mnt/GREENWOOD_BACKUP/home/kevin.mcgregor/research/pitman_yor/basic_py/sim/plots"
# Values of n and concentration parameter to loop over
# (input filenames are based on these)
n.vals <- c(10, 100, 1000)
conc.vals <- c(0.1, 1, 10, 50)
dsct.vals <- 0.5
n.rep <- 500 # Number of replications of each sim
n.n <- length(n.vals)
n.c <- length(conc.vals)
# Containers
bias.top <- bias.local <- bias.var <- bias.var.local <- matrix(0, n.rep, n.n*n.c)
bias.top.exact <- bias.local.exact <- bias.var.exact <-
bias.var.local.exact <- matrix(0, n.rep, n.n*n.c)
nn=1
cc=1
cat("n =", n.vals[nn], "\n")
cat("conc =", conc.vals[cc], "\n")
fname <- paste0(in.dir, "/", "bias_n", n.vals[nn], "_conc", conc.vals[cc], "_dsct",
dsct.vals, ".RData")
load(fname)
ind <- (nn-1)*n.c+cc
bias.top[,ind] <- (obs.n.sp - expect.n.sp)/expect.n.sp
bias.local[,ind] <- (obs.n.sp.lower - expect.n.sp.lower)/expect.n.sp.lower
bias.top.exact[,ind] <- (obs.n.sp - expect.n.sp.exact)/expect.n.sp.exact
bias.local.exact[,ind] <- (obs.n.sp.lower - expect.n.sp.lower.exact)/expect.n.sp.lower.exact
obs.var.n.sp.lower
var.n.sp.lower
var.n.sp.lower.exact
# Bias of variance of number of tables
bias.var <- (obs.var.n.sp - var.n.sp)/var.n.sp
# Containers
bias.top <- bias.local <- bias.var <- bias.var.local <- matrix(0, n.rep, n.n*n.c)
bias.top.exact <- bias.local.exact <- bias.var.exact <-
bias.var.local.exact <- matrix(0, n.rep, n.n*n.c)
# Bias of variance of number of tables
bias.var[,ind] <- (obs.var.n.sp - var.n.sp)/var.n.sp
bias.var.local[,ind] <- (obs.var.n.sp.lower - var.n.sp.lower)/var.n.sp.lower
head(bias.var)
head(bias.var.local)
bias.var.exact[,ind] <- (obs.var.n.sp.lower - var.n.sp.exact)/var.n.sp.exact
bias.var.local.exact[,ind] <- (obs.var.n.sp.lower - var.n.sp.lower.exact)/var.n.sp.lower.exact
head(bias.var.exact)
bias.var.exact[,ind] <- (obs.var.n.sp- var.n.sp.exact)/var.n.sp.exact
head(bias.var.exact)
bias.var.local.exact[,ind] <- (obs.var.n.sp.lower - var.n.sp.lower.exact)/var.n.sp.lower.exact
head(bias.var.local.exact)
obs.var.n.sp.lower
var.n.sp.lower.exact
bias.var
bias.var.local
bias.var.exact
bias.var.local.exact
for (nn in 1:n.n) {
cat("n =", n.vals[nn], "\n")
for (cc in 1:n.c) {
cat("conc =", conc.vals[cc], "\n")
fname <- paste0(in.dir, "/", "bias_n", n.vals[nn], "_conc", conc.vals[cc], "_dsct",
dsct.vals, ".RData")
load(fname)
# Calculating bias
ind <- (nn-1)*n.c+cc
bias.top[,ind] <- (obs.n.sp - expect.n.sp)/expect.n.sp
bias.local[,ind] <- (obs.n.sp.lower - expect.n.sp.lower)/expect.n.sp.lower
bias.top.exact[,ind] <- (obs.n.sp - expect.n.sp.exact)/expect.n.sp.exact
bias.local.exact[,ind] <- (obs.n.sp.lower - expect.n.sp.lower.exact)/expect.n.sp.lower.exact
# Bias of variance of number of tables
bias.var[,ind] <- (obs.var.n.sp - var.n.sp)/var.n.sp
bias.var.local[,ind] <- (obs.var.n.sp.lower - var.n.sp.lower)/var.n.sp.lower
bias.var.exact[,ind] <- (obs.var.n.sp- var.n.sp.exact)/var.n.sp.exact
bias.var.local.exact[,ind] <- (obs.var.n.sp.lower - var.n.sp.lower.exact)/var.n.sp.lower.exact
}
}
bias.var.exact
local.var.df <- local.df
local.var.df$Bias <- c(bias.var.local)
f.n <- factor(n.vals, levels=c("10", "100", "1000"))
f.c <- factor(conc.vals, levels=c("0.1", "1", "10", "50"))
local.df <- data.frame(Bias=c(bias.local),
n=rep(f.n, each=n.rep*n.c),
Concentration=rep(rep(f.c, each=n.rep), n.n))
local.df.exact <- local.df
local.df.exact$Bias <- c(bias.local.exact)
top.df <- local.df
top.df$Bias <- c(bias.top)
top.df.exact <- local.df
top.df.exact$Bias <- c(bias.top.exact)
local.var.df <- local.df
local.var.df$Bias <- c(bias.var.local)
local.var.df
local.var.df.exact <- local.df
local.var.df.exact$Bias <- c(bias.var.local.exact)
local.var.df.exact
top.var.df <- local.df
top.var.df$Bias <- c(bias.var)
top.var.df
top.var.df.exact <- local.df
top.var.df.exact <- local.df
top.var.df.exact$Bias <- c(bias.var.exact)
top.var.df.exact
# Plots for variance
plot.title.top.var.exact = paste0("Top-level bias: exact var, ", "Discount = ", dsct.vals[1])
top.var.plot.exact = ggplot(top.var.df.exact, aes(n, Bias, fill=Concentration)) + geom_boxplot() + #facet_wrap( ~ z*n.otu, ncol=2) +
theme_bw() +
theme(legend.position = "bottom",text = element_text(size=20), axis.text.x = element_text(size=16,angle=0,vjust=1,hjust=0.5)) +
labs(title=plot.title.top.var.exact) +
xlab("Number local samples") + ylab("(Normalized) Bias") + cowplot::panel_border()
top.var.plot.exact
